# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Release_Build

on:
  release:
    types: [ released ]

jobs:
  build-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'zulu'
      - name: Cache Docker layers
        uses: actions/cache@v2.1.6
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Cache Maven packages
        uses: actions/cache@v2.1.6
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: |
          mvn versions:set -B -ntp -DnewVersion=${{ github.event.release.tag_name }}
          mvn install -B -ntp --file pom.xml -s .github/settings.xml -DskipITs=true
        env:
          GITHUB_ACTOR: ${{ secrets.PACKAGES_USER }}
          GITHUB_TOKEN: ${{ secrets.PACKAGES_PAT }}
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.CONTAINER_REGISTRY }}
          username: ${{ secrets.CONTAINER_REGISTRY_USER }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.CONTAINER_REGISTRY }}/beispiel/springbootongithub:${{ github.event.release.tag_name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy-integration:
    runs-on: ubuntu-latest
    environment: integration
    needs: [ "build-release" ]
    steps:
      - uses: actions/checkout@v2
      - name: Setup helmfile
        uses: mamezou-tech/setup-helmfile@v0.8.0
      - name: Prepare Helm Template
        run: |
          helm registry login ${{ secrets.CONTAINER_REGISTRY }} -u ${{ secrets.CONTAINER_REGISTRY_USER }} -p ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
        env:
          HELM_EXPERIMENTAL_OCI: 1
      - name: Build helmfile
        run: |
          helmfile --environment integration template --output-dir target/helm --set 'version=${{ github.event.release.tag_name }}'
      - name: Kubernetes set context
        uses: Azure/k8s-set-context@v1
        with:
          method: service-account
          k8s-url: ${{ secrets.KUBERNETES_API }}
          k8s-secret: ${{ secrets.KUBERNETES_DEPLOY_SECRET }}
      - name: Deploy to Kubernetes cluster
        uses: Azure/k8s-deploy@v1.4
        with:
          namespace: integration-beispiel
          manifests: "target/helm"

  integration-tests-integration:
    needs: [ "deploy-integration" ]
    runs-on: [ self-hosted, linux, x64 ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'zulu'
      - name: Cache Maven packages
        uses: actions/cache@v2.1.6
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run:
          mvn -ntp -B clean test-compile failsafe:integration-test failsafe:verify --file pom.xml -s .github/settings.xml -Dkarate.env=integration -Dkarate.options="--tags ~@ignore --tags ~@external" -Duser=$TESTUSER_CREDENTIALS_USR -Dpassword=$TESTUSER_CREDENTIALS_PSW
        env:
          GITHUB_ACTOR: ${{ secrets.PACKAGES_USER }}
          GITHUB_TOKEN: ${{ secrets.PACKAGES_PAT }}


  deploy-abnahme:
    runs-on: ubuntu-latest
    environment: abnahme
    needs: [ "integration-tests-integration" ]
    steps:
      - uses: actions/checkout@v2
      - name: Helm installer
        uses: Azure/setup-helm@v1.1
        with:
          version: "latest"
      - name: Prepare Helm Template
        run: |
          helm registry login ${{ secrets.CONTAINER_REGISTRY }} -u ${{ secrets.CONTAINER_REGISTRY_USER }} -p ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
          helm chart pull  ${{ secrets.CONTAINER_REGISTRY }}/bp/charts/spring-boot-2:10.1.0
          helm chart export  ${{ secrets.CONTAINER_REGISTRY }}/bp/charts/spring-boot-2:10.1.0 --destination ./
        env:
          HELM_EXPERIMENTAL_OCI: 1
      - name: Prepare Manifests
        uses: azure/k8s-bake@v1
        with:
          silent: false
          renderEngine: 'helm'
          helmChart: './spring-boot-2/'
          overrideFiles: './helm/values-abnahme.yaml'
          overrides: |
            version:${{ github.event.release.tag_name }}
        id: bake
      - name: Kubernetes set context
        uses: Azure/k8s-set-context@v1
        with:
          method: service-account
          k8s-url: ${{ secrets.KUBERNETES_API }}
          k8s-secret: ${{ secrets.KUBERNETES_DEPLOY_SECRET }}
      - name: Deploy to Kubernetes cluster
        uses: Azure/k8s-deploy@v1.4
        with:
          namespace: abnahme-beispiel
          manifests: ${{ steps.bake.outputs.manifestsBundle }}

  integration-tests-abnahme:
    needs: [ "deploy-abnahme" ]
    runs-on: [ self-hosted, linux, x64 ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'zulu'
      - name: Cache Maven packages
        uses: actions/cache@v2.1.6
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run:
          mvn -ntp -B clean test-compile failsafe:integration-test failsafe:verify --file pom.xml -s .github/settings.xml -Dkarate.env=abnahme -Dkarate.options="--tags ~@ignore --tags ~@external" -Duser=$TESTUSER_CREDENTIALS_USR -Dpassword=$TESTUSER_CREDENTIALS_PSW
        env:
          GITHUB_ACTOR: ${{ secrets.PACKAGES_USER }}
          GITHUB_TOKEN: ${{ secrets.PACKAGES_PAT }}

  deploy-produktion:
    runs-on: ubuntu-latest
    environment: produktion
    needs: [ "integration-tests-abnahme" ]
    steps:
      - uses: actions/checkout@v2
      - name: Helm installer
        uses: Azure/setup-helm@v1.1
        with:
          version: "latest"
      - name: Prepare Helm Template
        run: |
          helm registry login ${{ secrets.CONTAINER_REGISTRY }} -u ${{ secrets.CONTAINER_REGISTRY_USER }} -p ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
          helm chart pull ${{ secrets.CONTAINER_REGISTRY }}/bp/charts/spring-boot-2:10.1.0
          helm chart export ${{ secrets.CONTAINER_REGISTRY }}/bp/charts/spring-boot-2:10.1.0 --destination ./
        env:
          HELM_EXPERIMENTAL_OCI: 1
      - name: Prepare Manifests
        uses: azure/k8s-bake@v1
        with:
          silent: false
          renderEngine: 'helm'
          helmChart: './spring-boot-2/'
          overrideFiles: './helm/values-produktion.yaml'
          overrides: |
            version:${{ github.event.release.tag_name }}
        id: bake
      - name: Kubernetes set context
        uses: Azure/k8s-set-context@v1
        with:
          method: service-account
          k8s-url: ${{ secrets.KUBERNETES_API }}
          k8s-secret: ${{ secrets.KUBERNETES_DEPLOY_SECRET }}
      - name: Deploy to Kubernetes cluster
        uses: Azure/k8s-deploy@v1.4
        with:
          namespace: produktion-beispiel
          manifests: ${{ steps.bake.outputs.manifestsBundle }}
