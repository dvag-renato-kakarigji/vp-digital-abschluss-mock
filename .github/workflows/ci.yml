# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java_CI_mit_Maven

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  build-java:
    runs-on: ubuntu-latest
    outputs:
      maven-version: ${{ steps.project.outputs.version }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'zulu'
      - name: Cache Maven packages
        uses: actions/cache@v2.1.6
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Cache Docker layers
        uses: actions/cache@v2.1.6
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Cache SonarQube packages
        uses: actions/cache@v2.1.6
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Build with Maven
        run:
          mvn jacoco:prepare-agent verify jacoco:report org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -B -ntp --file pom.xml -s .github/settings.xml -DskipITs=true
        env:
          GITHUB_ACTOR: ${{ secrets.PACKAGES_USER }}
          GITHUB_TOKEN: ${{ secrets.PACKAGES_PAT }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: Extract Maven project version
        if: github.ref == 'refs/heads/develop'
        run: echo ::set-output name=version::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
        id: project
      - uses: azure/docker-login@v1
        if: github.ref == 'refs/heads/develop'
        with:
          login-server: ${{ secrets.CONTAINER_REGISTRY }}
          username: ${{ secrets.CONTAINER_REGISTRY_USER }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
      - name: Set up Docker Buildx
        if: github.ref == 'refs/heads/develop'
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        if: github.ref == 'refs/heads/develop'
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.CONTAINER_REGISTRY }}/beispiel/springbootongithub:${{ steps.project.outputs.version }}-${{ github.run_number }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        if: github.ref == 'refs/heads/develop'
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    needs: [ "build-java" ]
    runs-on: ubuntu-latest
    environment: entwicklung
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v2
      - name: Setup helmfile
        uses: mamezou-tech/setup-helmfile@v0.8.0
      - name: Prepare Helm Template
        run: |
          helm registry login ${{ secrets.CONTAINER_REGISTRY }} -u ${{ secrets.CONTAINER_REGISTRY_USER }} -p ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
        env:
          HELM_EXPERIMENTAL_OCI: 1
      - name: Build helm files
        run: |
          helmfile --environment entwicklung template --output-dir target/helm --set 'version=${{ needs.build-java.outputs.maven-version }}-${{ github.run_number }}'
      - name: Join helm files
        uses: dvag/join-files@v0.0.3
        id: join-helm
        with:
          input-glob: "./target/helm/**/*.yaml"
          output-file: "./target/helm/output.yaml"
      - name: Kubernetes set context
        uses: Azure/k8s-set-context@v1
        with:
          method: service-account
          k8s-url: ${{ secrets.KUBERNETES_API }}
          k8s-secret: ${{ secrets.KUBERNETES_DEPLOY_SECRET }}
      - name: Deploy to Kubernetes cluster
        uses: Azure/k8s-deploy@v1.4
        with:
          namespace: entwicklung-beispiel
          manifests: ${{ steps.join-helm.outputs.file }}
  integration-tests:
    needs: [ "deploy" ]
    runs-on: [ self-hosted, linux, x64 ]
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'zulu'
      - name: Cache Maven packages
        uses: actions/cache@v2.1.6
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run:
          mvn -ntp -B clean test-compile failsafe:integration-test failsafe:verify --file pom.xml -s .github/settings.xml -Dkarate.env=entwicklung -Dkarate.options="--tags ~@ignore --tags ~@external" -Duser=$TESTUSER_CREDENTIALS_USR -Dpassword=$TESTUSER_CREDENTIALS_PSW
        env:
          GITHUB_ACTOR: ${{ secrets.PACKAGES_USER }}
          GITHUB_TOKEN: ${{ secrets.PACKAGES_PAT }}
